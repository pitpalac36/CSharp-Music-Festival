// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/MusicFestivalProtocol.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto {

  /// <summary>Holder for reflection information generated from Protobuf/MusicFestivalProtocol.proto</summary>
  public static partial class MusicFestivalProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/MusicFestivalProtocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MusicFestivalProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRQcm90b2J1Zi9NdXNpY0Zlc3RpdmFsUHJvdG9jb2wucHJvdG8SBXByb3Rv",
            "IioKBFVzZXISEAoIdXNlcm5hbWUYASABKAkSEAoIcGFzc3dvcmQYAiABKAki",
            "VgoGQXJ0aXN0EhAKCGxvY2F0aW9uGAEgASgJEgwKBGRhdGUYAiABKAkSHgoW",
            "YXZhaWxhYmxlVGlja2V0c051bWJlchgDIAEoBRIMCgRuYW1lGAQgASgJIoEB",
            "CgRTaG93EgoKAmlkGAEgASgFEgwKBGRhdGUYAiABKAkSEAoIbG9jYXRpb24Y",
            "AyABKAkSHgoWYXZhaWxhYmxlVGlja2V0c051bWJlchgEIAEoBRIZChFzb2xk",
            "VGlja2V0c051bWJlchgFIAEoBRISCgphcnRpc3ROYW1lGAYgASgJIj8KBlRp",
            "Y2tldBIOCgZzaG93SWQYASABKAUSFQoNcHVyY2hhc2VyTmFtZRgCIAEoCRIO",
            "CgZudW1iZXIYAyABKAUi0gEKB1JlcXVlc3QSIQoEdHlwZRgBIAEoDjITLnBy",
            "b3RvLlJlcXVlc3QuVHlwZRIZCgR1c2VyGAIgASgLMgsucHJvdG8uVXNlchId",
            "CgZ0aWNrZXQYAyABKAsyDS5wcm90by5UaWNrZXQSDAoEZGF0ZRgEIAEoCSJc",
            "CgRUeXBlEgoKBlVua293bhAAEgkKBUxvZ2luEAESCgoGTG9nb3V0EAISDQoJ",
            "QnV5VGlja2V0EAMSFAoQR2V0QXJ0aXN0c0J5RGF0ZRAEEgwKCEdldFNob3dz",
            "EAUijQIKCFJlc3BvbnNlEiIKBHR5cGUYASABKA4yFC5wcm90by5SZXNwb25z",
            "ZS5UeXBlEg0KBWVycm9yGAIgASgJEh0KBnRpY2tldBgDIAEoCzINLnByb3Rv",
            "LlRpY2tldBIZCgR1c2VyGAYgASgLMgsucHJvdG8uVXNlchIdCgZhcnRpc3QY",
            "BCADKAsyDS5wcm90by5BcnRpc3QSGgoFc2hvd3MYBSADKAsyCy5wcm90by5T",
            "aG93IlkKBFR5cGUSCwoHVW5rbm93bhAAEgYKAk9rEAESCQoFRXJyb3IQAhIN",
            "CglCdXlUaWNrZXQQAxIUChBHZXRBcnRpc3RzQnlEYXRlEAQSDAoIR2V0U2hv",
            "d3MQBUIeChFwcm90b2J1ZmZwcm90b2NvbEIJUHJvdG9idWZzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.User), global::Proto.User.Parser, new[]{ "Username", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Artist), global::Proto.Artist.Parser, new[]{ "Location", "Date", "AvailableTicketsNumber", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Show), global::Proto.Show.Parser, new[]{ "Id", "Date", "Location", "AvailableTicketsNumber", "SoldTicketsNumber", "ArtistName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Ticket), global::Proto.Ticket.Parser, new[]{ "ShowId", "PurchaserName", "Number" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Request), global::Proto.Request.Parser, new[]{ "Type", "User", "Ticket", "Date" }, null, new[]{ typeof(global::Proto.Request.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Response), global::Proto.Response.Parser, new[]{ "Type", "Error", "Ticket", "User", "Artist", "Shows" }, null, new[]{ typeof(global::Proto.Response.Types.Type) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class User : pb::IMessage<User> {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MusicFestivalProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User(User other) : this() {
      username_ = other.username_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as User);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Artist : pb::IMessage<Artist> {
    private static readonly pb::MessageParser<Artist> _parser = new pb::MessageParser<Artist>(() => new Artist());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Artist> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MusicFestivalProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Artist() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Artist(Artist other) : this() {
      location_ = other.location_;
      date_ = other.date_;
      availableTicketsNumber_ = other.availableTicketsNumber_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Artist Clone() {
      return new Artist(this);
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 1;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 2;
    private string date_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Date {
      get { return date_; }
      set {
        date_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "availableTicketsNumber" field.</summary>
    public const int AvailableTicketsNumberFieldNumber = 3;
    private int availableTicketsNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvailableTicketsNumber {
      get { return availableTicketsNumber_; }
      set {
        availableTicketsNumber_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Artist);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Artist other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Location != other.Location) return false;
      if (Date != other.Date) return false;
      if (AvailableTicketsNumber != other.AvailableTicketsNumber) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (Date.Length != 0) hash ^= Date.GetHashCode();
      if (AvailableTicketsNumber != 0) hash ^= AvailableTicketsNumber.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Location.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Location);
      }
      if (Date.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Date);
      }
      if (AvailableTicketsNumber != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AvailableTicketsNumber);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (Date.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Date);
      }
      if (AvailableTicketsNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvailableTicketsNumber);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Artist other) {
      if (other == null) {
        return;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.Date.Length != 0) {
        Date = other.Date;
      }
      if (other.AvailableTicketsNumber != 0) {
        AvailableTicketsNumber = other.AvailableTicketsNumber;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Location = input.ReadString();
            break;
          }
          case 18: {
            Date = input.ReadString();
            break;
          }
          case 24: {
            AvailableTicketsNumber = input.ReadInt32();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Show : pb::IMessage<Show> {
    private static readonly pb::MessageParser<Show> _parser = new pb::MessageParser<Show>(() => new Show());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Show> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MusicFestivalProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Show() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Show(Show other) : this() {
      id_ = other.id_;
      date_ = other.date_;
      location_ = other.location_;
      availableTicketsNumber_ = other.availableTicketsNumber_;
      soldTicketsNumber_ = other.soldTicketsNumber_;
      artistName_ = other.artistName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Show Clone() {
      return new Show(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 2;
    private string date_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Date {
      get { return date_; }
      set {
        date_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 3;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "availableTicketsNumber" field.</summary>
    public const int AvailableTicketsNumberFieldNumber = 4;
    private int availableTicketsNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvailableTicketsNumber {
      get { return availableTicketsNumber_; }
      set {
        availableTicketsNumber_ = value;
      }
    }

    /// <summary>Field number for the "soldTicketsNumber" field.</summary>
    public const int SoldTicketsNumberFieldNumber = 5;
    private int soldTicketsNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SoldTicketsNumber {
      get { return soldTicketsNumber_; }
      set {
        soldTicketsNumber_ = value;
      }
    }

    /// <summary>Field number for the "artistName" field.</summary>
    public const int ArtistNameFieldNumber = 6;
    private string artistName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ArtistName {
      get { return artistName_; }
      set {
        artistName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Show);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Show other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Date != other.Date) return false;
      if (Location != other.Location) return false;
      if (AvailableTicketsNumber != other.AvailableTicketsNumber) return false;
      if (SoldTicketsNumber != other.SoldTicketsNumber) return false;
      if (ArtistName != other.ArtistName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Date.Length != 0) hash ^= Date.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (AvailableTicketsNumber != 0) hash ^= AvailableTicketsNumber.GetHashCode();
      if (SoldTicketsNumber != 0) hash ^= SoldTicketsNumber.GetHashCode();
      if (ArtistName.Length != 0) hash ^= ArtistName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Date.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Date);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Location);
      }
      if (AvailableTicketsNumber != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AvailableTicketsNumber);
      }
      if (SoldTicketsNumber != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SoldTicketsNumber);
      }
      if (ArtistName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ArtistName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Date.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Date);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (AvailableTicketsNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvailableTicketsNumber);
      }
      if (SoldTicketsNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SoldTicketsNumber);
      }
      if (ArtistName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ArtistName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Show other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Date.Length != 0) {
        Date = other.Date;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.AvailableTicketsNumber != 0) {
        AvailableTicketsNumber = other.AvailableTicketsNumber;
      }
      if (other.SoldTicketsNumber != 0) {
        SoldTicketsNumber = other.SoldTicketsNumber;
      }
      if (other.ArtistName.Length != 0) {
        ArtistName = other.ArtistName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Date = input.ReadString();
            break;
          }
          case 26: {
            Location = input.ReadString();
            break;
          }
          case 32: {
            AvailableTicketsNumber = input.ReadInt32();
            break;
          }
          case 40: {
            SoldTicketsNumber = input.ReadInt32();
            break;
          }
          case 50: {
            ArtistName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Ticket : pb::IMessage<Ticket> {
    private static readonly pb::MessageParser<Ticket> _parser = new pb::MessageParser<Ticket>(() => new Ticket());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ticket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MusicFestivalProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ticket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ticket(Ticket other) : this() {
      showId_ = other.showId_;
      purchaserName_ = other.purchaserName_;
      number_ = other.number_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ticket Clone() {
      return new Ticket(this);
    }

    /// <summary>Field number for the "showId" field.</summary>
    public const int ShowIdFieldNumber = 1;
    private int showId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShowId {
      get { return showId_; }
      set {
        showId_ = value;
      }
    }

    /// <summary>Field number for the "purchaserName" field.</summary>
    public const int PurchaserNameFieldNumber = 2;
    private string purchaserName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PurchaserName {
      get { return purchaserName_; }
      set {
        purchaserName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 3;
    private int number_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ticket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ticket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShowId != other.ShowId) return false;
      if (PurchaserName != other.PurchaserName) return false;
      if (Number != other.Number) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShowId != 0) hash ^= ShowId.GetHashCode();
      if (PurchaserName.Length != 0) hash ^= PurchaserName.GetHashCode();
      if (Number != 0) hash ^= Number.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShowId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ShowId);
      }
      if (PurchaserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PurchaserName);
      }
      if (Number != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Number);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShowId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShowId);
      }
      if (PurchaserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PurchaserName);
      }
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ticket other) {
      if (other == null) {
        return;
      }
      if (other.ShowId != 0) {
        ShowId = other.ShowId;
      }
      if (other.PurchaserName.Length != 0) {
        PurchaserName = other.PurchaserName;
      }
      if (other.Number != 0) {
        Number = other.Number;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ShowId = input.ReadInt32();
            break;
          }
          case 18: {
            PurchaserName = input.ReadString();
            break;
          }
          case 24: {
            Number = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MusicFestivalProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request(Request other) : this() {
      type_ = other.type_;
      User = other.user_ != null ? other.User.Clone() : null;
      Ticket = other.ticket_ != null ? other.Ticket.Clone() : null;
      date_ = other.date_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Proto.Request.Types.Type type_ = 0;
    /// <summary>
    /// Identifies which request is filled in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Request.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::Proto.User user_;
    /// <summary>
    /// One of the following will be filled in, depending on the type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 3;
    private global::Proto.Ticket ticket_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Ticket Ticket {
      get { return ticket_; }
      set {
        ticket_ = value;
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 4;
    private string date_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Date {
      get { return date_; }
      set {
        date_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(User, other.User)) return false;
      if (!object.Equals(Ticket, other.Ticket)) return false;
      if (Date != other.Date) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (ticket_ != null) hash ^= Ticket.GetHashCode();
      if (Date.Length != 0) hash ^= Date.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (ticket_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Ticket);
      }
      if (Date.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Date);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (ticket_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ticket);
      }
      if (Date.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Date);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Proto.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.ticket_ != null) {
        if (ticket_ == null) {
          ticket_ = new global::Proto.Ticket();
        }
        Ticket.MergeFrom(other.Ticket);
      }
      if (other.Date.Length != 0) {
        Date = other.Date;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::Proto.Request.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            if (user_ == null) {
              user_ = new global::Proto.User();
            }
            input.ReadMessage(user_);
            break;
          }
          case 26: {
            if (ticket_ == null) {
              ticket_ = new global::Proto.Ticket();
            }
            input.ReadMessage(ticket_);
            break;
          }
          case 34: {
            Date = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Request message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("Unkown")] Unkown = 0,
        [pbr::OriginalName("Login")] Login = 1,
        [pbr::OriginalName("Logout")] Logout = 2,
        [pbr::OriginalName("BuyTicket")] BuyTicket = 3,
        [pbr::OriginalName("GetArtistsByDate")] GetArtistsByDate = 4,
        [pbr::OriginalName("GetShows")] GetShows = 5,
      }

    }
    #endregion

  }

  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MusicFestivalProtocolReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this() {
      type_ = other.type_;
      error_ = other.error_;
      Ticket = other.ticket_ != null ? other.Ticket.Clone() : null;
      User = other.user_ != null ? other.User.Clone() : null;
      artist_ = other.artist_.Clone();
      shows_ = other.shows_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Proto.Response.Types.Type type_ = 0;
    /// <summary>
    /// Identifies which request is filled in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Response.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    private string error_ = "";
    /// <summary>
    /// One of the following will be filled in, depending on the type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 3;
    private global::Proto.Ticket ticket_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Ticket Ticket {
      get { return ticket_; }
      set {
        ticket_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 6;
    private global::Proto.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "artist" field.</summary>
    public const int ArtistFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Proto.Artist> _repeated_artist_codec
        = pb::FieldCodec.ForMessage(34, global::Proto.Artist.Parser);
    private readonly pbc::RepeatedField<global::Proto.Artist> artist_ = new pbc::RepeatedField<global::Proto.Artist>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Artist> Artist {
      get { return artist_; }
    }

    /// <summary>Field number for the "shows" field.</summary>
    public const int ShowsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Proto.Show> _repeated_shows_codec
        = pb::FieldCodec.ForMessage(42, global::Proto.Show.Parser);
    private readonly pbc::RepeatedField<global::Proto.Show> shows_ = new pbc::RepeatedField<global::Proto.Show>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Show> Shows {
      get { return shows_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Error != other.Error) return false;
      if (!object.Equals(Ticket, other.Ticket)) return false;
      if (!object.Equals(User, other.User)) return false;
      if(!artist_.Equals(other.artist_)) return false;
      if(!shows_.Equals(other.shows_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (ticket_ != null) hash ^= Ticket.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      hash ^= artist_.GetHashCode();
      hash ^= shows_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Error);
      }
      if (ticket_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Ticket);
      }
      artist_.WriteTo(output, _repeated_artist_codec);
      shows_.WriteTo(output, _repeated_shows_codec);
      if (user_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(User);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (ticket_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ticket);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      size += artist_.CalculateSize(_repeated_artist_codec);
      size += shows_.CalculateSize(_repeated_shows_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      if (other.ticket_ != null) {
        if (ticket_ == null) {
          ticket_ = new global::Proto.Ticket();
        }
        Ticket.MergeFrom(other.Ticket);
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Proto.User();
        }
        User.MergeFrom(other.User);
      }
      artist_.Add(other.artist_);
      shows_.Add(other.shows_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::Proto.Response.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            Error = input.ReadString();
            break;
          }
          case 26: {
            if (ticket_ == null) {
              ticket_ = new global::Proto.Ticket();
            }
            input.ReadMessage(ticket_);
            break;
          }
          case 34: {
            artist_.AddEntriesFrom(input, _repeated_artist_codec);
            break;
          }
          case 42: {
            shows_.AddEntriesFrom(input, _repeated_shows_codec);
            break;
          }
          case 50: {
            if (user_ == null) {
              user_ = new global::Proto.User();
            }
            input.ReadMessage(user_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Response message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("Unknown")] Unknown = 0,
        [pbr::OriginalName("Ok")] Ok = 1,
        [pbr::OriginalName("Error")] Error = 2,
        [pbr::OriginalName("BuyTicket")] BuyTicket = 3,
        [pbr::OriginalName("GetArtistsByDate")] GetArtistsByDate = 4,
        [pbr::OriginalName("GetShows")] GetShows = 5,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
